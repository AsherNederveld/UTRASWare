; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\timersexample.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timersexample.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I.. -I..\..\.. -I.\RTE\_Timers -IC:\Users\matth\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\matth\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DTM4C123GH6PM -D_RTE_ -Drvmdk -DPART_LM4F120H5QR --omf_browse=.\objects\timersexample.crf TimersExample.c]
                          THUMB

                          AREA ||i.dummyTask1||, CODE, READONLY, ALIGN=2

                  dummyTask1 PROC
;;;32     
;;;33     void dummyTask1(void) { ++counter0A; }
000000  4802              LDR      r0,|L1.12|
000002  6800              LDR      r0,[r0,#0]  ; counter0A
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L1.12|
000008  6008              STR      r0,[r1,#0]  ; counter0A
00000a  4770              BX       lr
;;;34     
                          ENDP

                  |L1.12|
                          DCD      counter0A

                          AREA ||i.dummyTask2||, CODE, READONLY, ALIGN=2

                  dummyTask2 PROC
;;;34     
;;;35     void dummyTask2(void) { ++counter1A; }
000000  4802              LDR      r0,|L2.12|
000002  6800              LDR      r0,[r0,#0]  ; counter1A
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L2.12|
000008  6008              STR      r0,[r1,#0]  ; counter1A
00000a  4770              BX       lr
;;;36     
                          ENDP

                  |L2.12|
                          DCD      counter1A

                          AREA ||i.dummyTask3||, CODE, READONLY, ALIGN=2

                  dummyTask3 PROC
;;;36     
;;;37     void dummyTask3(void) {
000000  b510              PUSH     {r4,lr}
;;;38         ++counter2A;
000002  480c              LDR      r0,|L3.52|
000004  6800              LDR      r0,[r0,#0]  ; counter2A
000006  1c40              ADDS     r0,r0,#1
000008  490a              LDR      r1,|L3.52|
00000a  6008              STR      r0,[r1,#0]  ; counter2A
;;;39         
;;;40         if (counter2A == 100) {
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]  ; counter2A
000010  2864              CMP      r0,#0x64
000012  d107              BNE      |L3.36|
;;;41             /* Place a breakpoint at L38! Notice that at counter2A = 100, counter0A ~= 25, counter1A ~= 50. */
;;;42             TimerUpdatePeriod(TIMER_2A, freqToPeriod(100, MAX_FREQ)); 
000014  4908              LDR      r1,|L3.56|
000016  f7fffffe          BL       freqToPeriod
00001a  4604              MOV      r4,r0
00001c  4621              MOV      r1,r4
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       TimerUpdatePeriod
                  |L3.36|
;;;43         }
;;;44         if (counter2A == 105) {
000024  4803              LDR      r0,|L3.52|
000026  6800              LDR      r0,[r0,#0]  ; counter2A
000028  2869              CMP      r0,#0x69
00002a  d101              BNE      |L3.48|
;;;45             /* Place a breakpoint at L42! Notice here that when counter2A = 105, counter0A ~= 30, counter1A ~= 60. */
;;;46             uint8_t i = 0;
00002c  2000              MOVS     r0,#0
;;;47         }
00002e  bf00              NOP      
                  |L3.48|
;;;48     }
000030  bd10              POP      {r4,pc}
;;;49     
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      counter2A
                  |L3.56|
                          DCD      0x04c4b400

                          AREA ||i.dummyTask4||, CODE, READONLY, ALIGN=2

                  dummyTask4 PROC
;;;49     
;;;50     void dummyTask4(void) { ++counter0B; }
000000  4802              LDR      r0,|L4.12|
000002  6800              LDR      r0,[r0,#0]  ; counter0B
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L4.12|
000008  6008              STR      r0,[r1,#0]  ; counter0B
00000a  4770              BX       lr
;;;51     
                          ENDP

                  |L4.12|
                          DCD      counter0B

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;51     
;;;52     int main(void) {
000000  b090              SUB      sp,sp,#0x40
;;;53         /** 
;;;54          * This program demonstrates the initialization and operation of four
;;;55          * timers at different frequencies.
;;;56          */
;;;57         PLL_Init(Bus80MHz);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       PLL_Init
;;;58         DisableInterrupts();
000008  f7fffffe          BL       DisableInterrupts
;;;59     
;;;60         TimerConfig_t timers[4] = {
00000c  2240              MOVS     r2,#0x40
00000e  4918              LDR      r1,|L5.112|
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memcpy4
000016  4917              LDR      r1,|L5.116|
000018  2064              MOVS     r0,#0x64
00001a  f7fffffe          BL       freqToPeriod
00001e  9001              STR      r0,[sp,#4]
000020  4914              LDR      r1,|L5.116|
000022  f44f7048          MOV      r0,#0x320
000026  f7fffffe          BL       freqToPeriod
00002a  9005              STR      r0,[sp,#0x14]
00002c  4911              LDR      r1,|L5.116|
00002e  20c8              MOVS     r0,#0xc8
000030  f7fffffe          BL       freqToPeriod
000034  9009              STR      r0,[sp,#0x24]
000036  490f              LDR      r1,|L5.116|
000038  f44f70c8          MOV      r0,#0x190
00003c  f7fffffe          BL       freqToPeriod
000040  900d              STR      r0,[sp,#0x34]
;;;61             /* The first timer has keyed arguments notated to show you what each positional argument means. */
;;;62             {.timerID=TIMER_0A, .period=freqToPeriod(100, MAX_FREQ), .isPeriodic=true, .priority=5, .handlerTask=dummyTask1},
;;;63             {         TIMER_0B,         freqToPeriod(800, MAX_FREQ),             true,           5,              dummyTask4},
;;;64             {         TIMER_1A,         freqToPeriod(200, MAX_FREQ),             true,           5,              dummyTask2},
;;;65             {         TIMER_2A,         freqToPeriod(400, MAX_FREQ),             true,           5,              dummyTask3},
;;;66         };
;;;67     
;;;68         /* Initialize four timers based on the timer configuration array above. */
;;;69         TimerInit(timers[0]);
000042  e89d000f          LDM      sp,{r0-r3}
000046  f7fffffe          BL       TimerInit
;;;70         TimerInit(timers[1]);
00004a  a804              ADD      r0,sp,#0x10
00004c  c80f              LDM      r0,{r0-r3}
00004e  f7fffffe          BL       TimerInit
;;;71         TimerInit(timers[2]);
000052  a808              ADD      r0,sp,#0x20
000054  c80f              LDM      r0,{r0-r3}
000056  f7fffffe          BL       TimerInit
;;;72         TimerInit(timers[3]);
00005a  a80c              ADD      r0,sp,#0x30
00005c  c80f              LDM      r0,{r0-r3}
00005e  f7fffffe          BL       TimerInit
;;;73     
;;;74         EnableInterrupts();
000062  f7fffffe          BL       EnableInterrupts
;;;75         while (1) {
000066  e001              B        |L5.108|
                  |L5.104|
;;;76             /** 
;;;77              * View in debugging mode with counter0A, counter0B, counter1A, and
;;;78              * counter2A added to watch 1. Run for a while, then check register
;;;79              * value ratios. Should be 1 : 0 : 2 : 4.
;;;80              * Note that you can't run both A side and B side timers at once.
;;;81              * Try it again with isPeriod set to false for single trigger mode,
;;;82              * or with different priorities on the timers. What do you see?
;;;83              *
;;;84              * NOTE: As of (09/13/21) B-side timers do not activate properly. 
;;;85              */
;;;86             WaitForInterrupt();
000068  f7fffffe          BL       WaitForInterrupt
                  |L5.108|
00006c  e7fc              B        |L5.104|
;;;87         };
;;;88     }
;;;89     
                          ENDP

00006e  0000              DCW      0x0000
                  |L5.112|
                          DCD      ||.constdata||
                  |L5.116|
                          DCD      0x04c4b400

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000008  01050000          DCB      0x01,0x05,0x00,0x00
                          DCD      dummyTask1
000010  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000018  01050000          DCB      0x01,0x05,0x00,0x00
                          DCD      dummyTask4
000020  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00000000
000028  01050000          DCB      0x01,0x05,0x00,0x00
                          DCD      dummyTask2
000030  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
000038  01050000          DCB      0x01,0x05,0x00,0x00
                          DCD      dummyTask3

                          AREA ||.data||, DATA, ALIGN=2

                  counter0A
                          DCD      0x00000000
                  counter0B
                          DCD      0x00000000
                  counter1A
                          DCD      0x00000000
                  counter2A
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
